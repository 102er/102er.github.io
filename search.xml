<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GO的GMP模型</title>
    <url>/2021/08/19/GO%E7%9A%84GMP%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>调度的进化 ：从进程到线程再到协程，其实就是不断共享，不断减少切换成本。go协程，在语言层面封装了协程调度，使用起来更方便。</p>
<span id="more"></span>

<h4 id="并发-amp-并行"><a href="#并发-amp-并行" class="headerlink" title="并发&amp;并行"></a><strong>并发</strong>&amp;并行</h4><p><strong>并发：</strong>某一段时间，几个程序在同一个cpu上运行，但任意一个时间点只有一个程序在运行。解决程序排队等待的问题，如果一个程序发生阻塞，那么其他程序仍可以正常的执行。站在cpu的角度上，并发实际也是串行的。</p>
<p><strong>并行</strong>：需要硬件支持，系统必须具备多个cpu，才能有并行的能力。不同cpu在同一时间运行不同程序，互不抢占资源，实现真正的同时执行。</p>
<p><strong>区别</strong>：并发只是在宏观上给人感觉多个程序在同时运行，但实际单cpu系统中，每一时刻只有一个程序在运行。而并行关键是多核【同时】执行。</p>
<h4 id="进程-amp-线程-amp-协程"><a href="#进程-amp-线程-amp-协程" class="headerlink" title="进程 &amp; 线程 &amp; 协程"></a><strong>进程</strong> &amp; 线程 &amp; 协程</h4><p><strong>进程：</strong>用于划分程序运行时所需要的资源(IO资源，信号处理，内存资源等)，是程序运行的基本资源单位(最小单位)；不共享堆栈，由操作系统调度，属于抢占式调度，有三个状态：等待，就绪和运行状态。进程之间是互相隔离，各自拥有独立的系统资源，更加安全但是进程间通信不方便。</p>
<p>进程间通讯方式：管道，信号，消息队列，共享内存，socket</p>
<p><strong>线程</strong>：系统进行运算调度的最小单位，一个进程至少包含一个线程(主线程)；线程由线程ID，当前指令指针，寄存器集合和堆栈组成，不拥有系统资源，进程内的所有线程共享进程资源；共享堆，不共享栈，由操作系统调度，属于抢占式调度。</p>
<p>线程间通讯方式：互斥量，信号量</p>
<p><strong>协程</strong>：用户级线程，是执行流，并不是运行实体，内核并不知道协程存在，共享堆，不共享栈，拥有自己的寄存器上下文和栈，由用户程序进程调度，是协作式调度，需要协程自己主动把控制权转让出去。</p>
<p><strong>区别</strong>：进程是cpu资源分配的基本单位，线程是独立运行和独立调度的基本单位；进程拥有自己的资源空间，一个进程包含了N个线程，线程和cpu资源分配无关，多个线程共享同一进程内的资源；线程的调度与切换比进程快很多(进程切换涉及资源切换，但是线程切换不需要)；协程和线程的区别，协程调度发生在用户态，无需线程上下文切换开销，而线程调度发生在内核态，所以协程调度会更加轻量。</p>
<h3 id="GMP模型"><a href="#GMP模型" class="headerlink" title="GMP模型"></a>GMP模型</h3><p><strong>M</strong>：代表OS线程，一个M就是一个线程，真正的执行者，数量比P多，M创建之后，会去P的free list寻找可用P进行绑定，如果没有绑定到P，则进入阻塞状态</p>
<p><strong>G</strong>：go func出来的goroutine，代表一个用户代码的只执行流，拥有独立的栈空间</p>
<p><strong>P</strong>：默认机器的核数，表示执行所需要的资源，P的数量代表最大并行程度，一个P对应多个M，但是同一时刻，只有一个M与P绑定；每个P都有一个本地存放G的队列，M和P绑定时，如果新生成的G会放入本地runq中，本地队列满了，会截取本地队列一半的G放入全局队列中。p减少了锁竞争以及增加了资源利用率。</p>
<p><strong>调度流程如下：</strong></p>
<ol>
<li>go func创建一个G对象，会保存在全局runq或者本地的runq（先放在生成G的线程runq下，如果队列满了，会放到全局runq）</li>
<li>G 只能运行在 M 中，一个 M 必须持有一个 P，M 与 P 是 1：1 的关系。M 会从 P 的本地队列弹出一个可执行状态的 G 来执行，如果 P 的本地队列为空，就会想其他的 MP 组合偷取一个可执行的 G 来执行；</li>
<li>当go func的时候，G去唤醒一个M，M寻找是否有空闲的P，如果有则将该G对象移动到它本身</li>
<li>M执行一个调度循环：<ol>
<li>调度G对象，G对象来源：1/61的几率从全局队来，60/61的几率在本地队列寻找G</li>
<li>执行 -&gt; 清理线程 -&gt; 继续寻找新的G</li>
</ol>
</li>
<li>p的某个G发生网络调用(或者系统调用，因为和系统交互是线程，所以当前M是阻塞的)，那么P和M会解绑，P会带着其他G去寻找新的M(找空闲的M，如果没有则new一个出来)</li>
<li>当 M 系统调用结束时候，这个 G 会尝试获取一个空闲的 P 执行，并放入到这个 P 的本地队列。如果获取不到 P，那么这个线程 M 变成休眠状态， 加入到空闲线程中，然后这个 G 会被放入全局队列中。</li>
</ol>
]]></content>
      <tags>
        <tag>GO</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>GO的channel</title>
    <url>/2021/08/19/GO%E7%9A%84channel/</url>
    <content><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>管道，保证线程安全，用于数据传递或者数据共享，属于先进先出的队列。实现 Channel 的结构并不神秘，本质上就是一个 <code>mutex</code> 锁加上一个环状缓存、 一个发送方队列和一个接收方队列。</p>
<span id="more"></span>

<h3 id="通信交互"><a href="#通信交互" class="headerlink" title="通信交互"></a>通信交互</h3><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a><strong>发送消息</strong></h4><ol>
<li>持有锁</li>
<li>入队，拷贝要发送的数据<ol>
<li>找到是否有正在阻塞的接收方，是则直接发送</li>
<li>找到是否有空余的缓存，是则存入</li>
<li>阻塞直到被唤醒</li>
</ol>
</li>
<li>释放锁</li>
</ol>
<h4 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a><strong>接收消息</strong></h4><ol>
<li>上锁</li>
<li>从缓存中出队，拷贝要接收的数据<ol>
<li>如果 Channel 已被关闭，且 Channel 没有数据，立刻返回</li>
<li>如果存在正在阻塞的发送方，说明缓存已满，从缓存队头取一个数据，再复始一个阻塞的发送方</li>
<li>否则，检查缓存，如果缓存中仍有数据，则从缓存中读取，读取过程会将队列中的数据拷贝一份到接收方的执行栈中</li>
<li>没有能接受的数据，阻塞当前的接收方 Goroutine</li>
</ol>
</li>
<li>解锁</li>
</ol>
<h3 id="通道关闭"><a href="#通道关闭" class="headerlink" title="通道关闭"></a>通道关闭</h3><h4 id="channel关闭后的读写"><a href="#channel关闭后的读写" class="headerlink" title="channel关闭后的读写"></a><strong>channel关闭后的读写</strong></h4><ul>
<li>关闭后的channel，可以读数据，因为channel中，可能会有缓存数据存在</li>
<li>关闭后的channel，如果再写数据，会引起panic异常，可以判断是否channel关闭，防止panic产生</li>
<li>nil的channel读写都会阻塞，再次close会引起panic</li>
</ul>
<h4 id="关闭原则"><a href="#关闭原则" class="headerlink" title="关闭原则"></a>关闭原则</h4><p>一个常用的使用Go通道的原则是<strong>不要在数据接收方或者在有多个发送者的情况下关闭通道</strong>。 换句话说，我们只应该让一个通道唯一的发送者关闭此通道。</p>
<ul>
<li>情形一：M个接收者和一个发送者。发送者通过关闭用来传输数据的通道来传递发送结束信号</li>
<li>情形二：一个接收者和N个发送者，此唯一接收者通过关闭一个额外的信号通道来通知发送者不要在发送数据了</li>
<li>情形三：M个接收者和N个发送者。它们中的任何协程都可以让一个中间调解协程帮忙发出停止数据传送的信号</li>
<li>情形四：“M个接收者和一个发送者”情形的一个变种：用来传输数据的通道的关闭请求由第三方发出</li>
</ul>
]]></content>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP介绍</title>
    <url>/2021/08/19/TCP%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>TCP 是一种面向连接的、可靠的、基于字节流的传输层通信协议，位于网络分层模型的传输层：</p>
<p><img src="https://102er.github.io/images/osi-model.png" alt="osi"></p>
<ul>
<li>面向连接：两个端必须建立tcp连接，才能通讯交换数据。</li>
<li>基于字节流：tcp连接双方的数据交换是以字节构成的有序但无结构的字节流。</li>
<li>可靠性：通过连接管理，流量控制，拥塞控制，超时重传机制，序号和确认序号等机制保证传输可靠。</li>
</ul>
<span id="more"></span>

<h2 id="TCP报文段"><a href="#TCP报文段" class="headerlink" title="TCP报文段"></a>TCP报文段</h2><p><img src="https://102er.github.io/images/tcp-bw.png" alt="osi"></p>
<ul>
<li>端口号：每个tcp报文包含源和目的端口号，2字节的端口号，端口号+ip可以组成一个socket</li>
<li>序号（seq）：数据序号，表示这个数据流在整个数据流中的序号，接收端可以根据序号组装数据</li>
<li>确认序号（ack）：确认序号，接收方成功接收数据，会回复发送端，并把接收的序号+1，告诉发送端自己接收了哪个序号的数据，下次数据要从ack序号开始发</li>
<li>首部长度：记录tcp头的长度，tcp</li>
<li>保留位：暂时没用</li>
<li>标志位：标记请求的目的，状态等<ul>
<li>URG：值为 1 时，紧急指针生效，表示本次报文需要尽快传输，不要按照原本的队列次序传输</li>
<li>ACK：值为 1 时，确认序号生效，表示数据已经被接收</li>
<li>PSH：接收方应尽快将这个报文段交给应用层</li>
<li>RST：发送端遇到问题，想要释放当前连接，重建传输连接。</li>
<li>SYN：同步序号，用于发起一个连接</li>
<li>FIN：发送端要求关闭连接</li>
</ul>
</li>
<li>窗口：TCP的流量控制由连接的每一端通过声明的窗口大小来提供。窗口大小为字节数，起始于确认序号字段指明的值，这个值是接收端正期望接收的字节。</li>
<li>检验和 (Checksum)：强制性必须携带的字段。检验和覆盖了整个 TCP 报文段，包括 TCP 首部和 TCP 数据，发送端根据特定算法对整个报文段计算出一个检验和，接收端会进行计算并验证。</li>
<li>紧急指针 (Urgent Pointer)：当 URG 控制位值为 1 时，此字段生效，紧急指针是一个正的偏移量，和序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</li>
<li>选项 (Options)：这一部分是可选字段，也就是非必须字段，最常见的可选字段是“最长报文大小 (MSS，Maximum Segment Size)”。</li>
<li>有效数据部分 (Data)：这部分也不是必须的，比如在建立和关闭 TCP 连接的阶段，双方交换的报文段就只包含 TCP 首部。</li>
</ul>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><img src="https://102er.github.io/images/tcp-3ws.png" alt="osi"></p>
<ol>
<li>第一次握手：客户端向服务端发送连接请求报文。此时标志位：SYN=1，同时会初始化一个序列号x 填充到 seq序号位。发送完，客户端进入syn-send状态，等待服务端的确认。<u>TCP规定SYN=1的报文不能携带数据，但需要消耗一个序号。</u></li>
<li>第二次握手：服务端接收报文之后，如果同意连接，会发出确认报文，包含标志位：SYN=1,ACK=1，确认序号ack=x+1(<u>x是客户端发送的seq序号值，序号+1代表服务端期望下次接收到客户的数据序号为x+1</u>)，序号seq=y。发送完报文，服务端进入syn-received状态。<u>TCP规定SYN=1的报文不能携带数据，但需要消耗一个序号。</u></li>
<li>第三次握手：客户端接收到确认报文，还需要向服务端给出确认报文，包含标志位：ACK=1，确认序号ack=y+1，序号seq=x+1，此时，tcp连接建立，客户端进入established。<u>TCP规定，ACK报文段可以携带数据，但如果不携带数据，则不消化序号。</u>当服务端接收到客户端的确认报文后也进入established。此后，双方就可以开始通信了。</li>
</ol>
<h3 id="为什么三次握手？"><a href="#为什么三次握手？" class="headerlink" title="为什么三次握手？"></a>为什么三次握手？</h3><ul>
<li>防止已过期的连接请求报文突然又传到服务器，浪费服务器资源<ul>
<li>第三次握手可以对失效请求报文，进行确认，当他接收了失效请求报文会回复，如果客户端是关闭状态的，那没办法进行确认请求，所以服务端收不到客户端确认报文，会判断客户端并没有提交请求连接。（<strong>失效请求</strong>：客户端发送了第一次握手，但是网络因素滞留。客户端迟迟没有接收到服务端的确认报文，会再次发送握手请求。那么此时，第一次发送的握手请求就是失效的。）</li>
</ul>
</li>
<li>三次握手才能确认让双方确认彼此的发送和接收能力<ul>
<li>第一次握手，服务端可以确认自己的<u>接收</u>能力和客户端的<u>发送</u>能力 </li>
<li>第二次握手，客户端可以确认自己的<u>收发</u>能力和服务端的<u>收发</u>能力 </li>
<li>第三次握手，前两次握手，服务端并不能知道自己的<u>发送</u>能力和客户端的<u>接收</u>能力是否正常。第三次握手，服务端收到了客户端第二次握手的回应，从服务端角度可以确认自己第二次握手发送的包发送出去且客户端接收了，所以确认了自己的<u>收发</u>能力和客户端的<u>收发</u>能力。</li>
</ul>
</li>
<li>告知对方自己的初始序号值，并确认收到对方的初始序号值<ul>
<li>三次握手，才能保证服务端发送的seq初始序号得到确认。</li>
</ul>
</li>
</ul>
<h3 id="SYN-FLOOD攻击"><a href="#SYN-FLOOD攻击" class="headerlink" title="SYN FLOOD攻击"></a>SYN FLOOD攻击</h3><p>伪造大量的源ip地址，分别向服务端发送大量的syn包，服务端返回的SYN/ACK包，因为源地址是伪造的，所以不会有应答，服务端没有收到应答，会重试并且等待一个syn time，如果超时则丢弃这个连接。这种半开连接会消耗服务端的资源，导致服务端无法正常服务。</p>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a><strong>四次挥手</strong></h2><p><img src="https://102er.github.io/images/tcp-4hs.png" alt="osi"></p>
<ol>
<li>客户端发送关闭连接的报文段，FIN 标志位1，请求关闭连接，并停止发送数据。序号字段 seq = x (等于之前发送的所有数据的最后一个字节的序号加一)，然后客户端会进入 FIN-WAIT-1 状态，等待来自服务器的确认报文。</li>
<li>服务器收到 FIN 报文后，发回确认报文，ACK = 1， ack = x + 1，并带上自己的序号 seq = y，然后服务器就进入 CLOSE-WAIT 状态。服务器还会通知上层的应用程序对方已经释放连接，此时 TCP 处于半关闭状态，也就是说客户端已经没有数据要发送了，但是服务器还可以发送数据，客户端也还能够接收。</li>
<li>客户端收到服务器的 ACK 报文段后随即进入 FIN-WAIT-2 状态，此时还能收到来自服务器的数据，直到收到 FIN 报文段。</li>
<li>服务器发送完所有数据后，会向客户端发送 FIN 报文段，各字段值如图所示，随后服务器进入 LAST-ACK 状态，等待来自客户端的确认报文段。</li>
<li>客户端收到来自服务器的 FIN 报文段后，向服务器发送 ACK 报文，随后进入 TIME-WAIT 状态，等待 2MSL(2 * Maximum Segment Lifetime，两倍的报文段最大存活时间) ，这是任何报文段在被丢弃前能在网络中存在的最长时间，常用值有30秒、1分钟和2分钟。如无特殊情况，客户端会进入 CLOSED 状态。</li>
<li>服务器在接收到客户端的 ACK 报文后会随即进入 CLOSED 状态，由于没有等待时间，一般而言，服务器比客户端更早进入 CLOSED 状态。</li>
</ol>
<h3 id="为什么客户端最后还要等待2MSL？"><a href="#为什么客户端最后还要等待2MSL？" class="headerlink" title="为什么客户端最后还要等待2MSL？"></a><strong>为什么客户端最后还要等待2MSL？</strong></h3><p>MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。去向ACK消息最大存活时间（MSL) + 来向FIN消息的最大存活时间(MSL)。这恰恰 就是**2MSL( Maximum Segment Life)。</p>
<ol>
<li>保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</li>
<li>等待2MSL时间，客户端就可以放心地释放TCP占用的资源、端口号。如果不等，释放的端口可能会重连刚断开的服务器端口，这样依然存活在网络里的老的TCP报文可能与新TCP连接报文冲突，造成数据冲突，为避免此种情况，需要耐心等待网络老的TCP连接的活跃报文全部死翘翘，2MSL时间可以满足这个需求（尽管非常保守）</li>
</ol>
<h3 id="如果已经建立了连接，但是客户端突然出现故障了怎么办？"><a href="#如果已经建立了连接，但是客户端突然出现故障了怎么办？" class="headerlink" title="如果已经建立了连接，但是客户端突然出现故障了怎么办？"></a><strong>如果已经建立了连接，但是客户端突然出现故障了怎么办？</strong></h3><p>TCP还设有一个<strong>保活计时器</strong>，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>
<h3 id="为什么建立连接是三次握手，关闭连接确是四次挥手呢？"><a href="#为什么建立连接是三次握手，关闭连接确是四次挥手呢？" class="headerlink" title="为什么建立连接是三次握手，关闭连接确是四次挥手呢？"></a><strong>为什么建立连接是三次握手，关闭连接确是四次挥手呢？</strong></h3><p>建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必已经将全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>git版本回退</title>
    <url>/2021/10/10/git%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80/</url>
    <content><![CDATA[<h3 id="代码回滚"><a href="#代码回滚" class="headerlink" title="代码回滚"></a>代码回滚</h3><p>git在代码回滚提供了多种方式，比如：git reset…，git revert…，git rebase…等，使用哪种方式回退，取决于实际回退场景。</p>
<span id="more"></span>

<h4 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h4><p>回退版本，直接把代码回退到某个提交，以实际例子，演示下需要如何回退：</p>
<p><img src="https://102er.github.io/images/git-reset-log.png" alt="avatar"></p>
<p>看提交记录，我们把dev分支不小心合并到了当前特性分支，需要剪掉dev的分支，保证功能分支的特性唯一。从分支线图看出，我们需要回退到 commit id = a94308f 这个版本，问题点是，我们在dev合并之后，又commit了几个记录，我们的目的是剪掉dev合并这次记录，如果是普通的commit 那么我们可以用git revert 撤销这个提交。但是这个是merge操作，没办法。所以，只能回退到a94308f这个版本，然后把dev后的提交pick进来。具体命令如下：</p>
<ol>
<li>git reset –hard  a94308f  #回退到这个版本，并清空其他提交内容</li>
<li>git cherry-pick fb9e36f    #找回消失的提交记录</li>
<li>git cherry-pick 6d60f55   #找回消失的提交记录</li>
<li>如果有冲突，需要解决冲突，然后执行：git cherry-pick –continue</li>
<li>最后再提交到远程 需要强制覆盖远程：git push -f</li>
</ol>
<p>这样就实现了版本的回退。有时候，我们发现要回退版本的时候，已经有很多人提交了。这时候 如果在使用git reset+cherry-pick方式，那不得疯了。基于cherry-pick之上，我们可以使用<strong>git rebase -i</strong> 互动模式，帮助我们解决多量commit的场景。</p>
<p>常用命令：</p>
<ul>
<li>使用 <code>git reset HEAD^</code> 回到上一個 patch（檔案內容不清空）</li>
<li>使用 <code>git reset --hard HEAD^</code> 回到上一個 patch，並且強制清除修改的內容 </li>
<li>使用 <code>git reset --hard &lt;commit id&gt;</code> 直接 reset 成指定的 patch</li>
<li>使用 git reset –soft HEAD^  回到前一個 patch，但保持檔案狀態為 *<strong>Changes to be committed*</strong></li>
<li><strong>– hard  要慎用此参数，它会删除回退点之前的所有修改内容。</strong>如果代码未提交，那就很难补救了，如果代码已经提交，那可以通过找到commit id 找回代码</li>
</ul>
<h4 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h4><p>revert一般在剔除部分提交。比如，我不需要commit=057c752,就可以执行：<code>git revert -n 057c752</code>  它可以帮忙我们移除一个commit；它仅仅只是踢掉这个commit，其他的commit还是在的。常用命令：</p>
<ul>
<li>使用 <code>git revert &lt;commit id&gt;</code> 還原指定的 patch</li>
<li>使用 <code>git revert --continue</code> 告知 git 已經解完衝突</li>
<li>使用 <code>git revert --abort</code> 來要放棄這次 revert</li>
<li>不适用于合并操作的commit</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>reset 适用于回退版本到当前版本没有新的commit，而revert是剪掉某个commit记录。</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus</title>
    <url>/2021/08/19/prometheus/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>protoc使用</title>
    <url>/2021/11/12/protoc%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>grpc使用protobuf进行数据的序列化和反序列化，在开发中经常需要写proto文件，进行接口声明定义，然后通过protoc工具转成相应的代码文件，protoc工具不支持生成go代码文件，需要按照相应的插件协助；本文主要介绍protoc工具的使用，以及proto文件的定义。</p>
<span id="more"></span>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="protoc指令"><a href="#protoc指令" class="headerlink" title="protoc指令"></a>protoc指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protoc	--proto_path=api/v1 \</span><br><span class="line">        -I=api/v2 \</span><br><span class="line">			 --gogo_out=paths=source_relative:. \</span><br><span class="line">       api/v1/hello_world.proto</span><br></pre></td></tr></table></figure>

<p> <strong>-IPATH, –proto_path=PATH 也可以用 -I</strong>：它表示protoc在哪个路径下搜索proto文件，可以重复使用这个参数，表示指定多个目录进行搜索。啥场景需要指定这个参数？</p>
<p>— 很多情况下，我们会在一个proto文件里面import其他proto文件，就需要指定这个路径，使protoc可以找到依赖。</p>
<p><strong>–xxx_out=OUT_DIR</strong>：指定使用哪个插件生成相应语言的代码。go需要自己安装插件，一般会选择官方的protoc-gen-go 【–go_out=XXXX】，如果对自定义要求高，可以了解protoc-gen-gogo 【–gogo_out=XXXX】；<code>--xxx_out</code>主要的两个参数为<code>plugins</code> 和 <code>paths</code>，分别表示生成Go代码所使用的插件，以及生成的Go代码的位置。<code>--go_out</code>的写法是，参数之间用逗号隔开，最后加上冒号来指定代码的生成位置，比如<code>--go_out=plugins=grpc,paths=import:.</code></p>
<ul>
<li><code>paths</code>参数有两个选项，分别是 <code>import</code> 和 <code>source_relative</code>，默认为 import，表示按照生成的Go代码的包的全路径去创建目录层级，source_relative 表示按照 <strong>proto源文件的目录层级</strong>去创建Go代码的目录层级，如果目录已存在则不用创建。</li>
<li>​    <code>plugins</code>参数有不带grpc和带grpc两种（应该还有其它的，目前知道的有这两种），两者的区别如下，带grpc的会多一些跟gRPC相关的代码，实现gRPC通信：</li>
</ul>
<p><code>paths</code>参数有两个选项，分别是 <code>import</code> 和 <code>source_relative</code>，默认为 import，表示按照生成的Go代码的包的全路径去创建目录层级，source_relative 表示按照 <strong>proto源文件的目录层级</strong>去创建Go代码的目录层级，如果目录已存在则不用创建。</p>
<p>  **  @<filename> ** ：表示要生成的proto文件，可以是一个目录，它会把目录下所有proto文件生成对应的代码。</p>
<h3 id="proto文件"><a href="#proto文件" class="headerlink" title="proto文件"></a>proto文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package helloWorld;</span><br><span class="line"></span><br><span class="line">option go_package=&quot;api/v1&quot;;</span><br><span class="line"></span><br><span class="line">service Greeter &#123;</span><br><span class="line">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br><span class="line">message HelloReply &#123;</span><br><span class="line">  string message = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>syntax：指定proto版本，默认是proto2进行编译</li>
<li><code>package</code>：是proto文件的命名空间，避免我们定义的service、message出现冲突。</li>
<li>go_package：生成go语言对应的包路径，对应go的包名，它的设置上需要和–go_out==xxx相同，保证go能够被正确引用。（当然，不一样也可以，这样需要保证go_out目录下只有这个包，不然就会出现冲突，所以，我们设置上一般保证相同，减少不必要的问题）</li>
<li>注意，不同包之间的 proto 文件不可以循环依赖，这会导致生成的 go 包之间也存在循环依赖，导致 go 代码编译不通过。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/2021/08/19/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>二叉树遍历</title>
    <url>/2021/08/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>服务部署</title>
    <url>/2021/08/19/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>mysql索引介绍</title>
    <url>/2021/08/19/mysql%E7%B4%A2%E5%BC%95%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>　　索引是一个单独的、存储在磁盘上的数据库结构，它们包含着对数据表里所有记录的引用指针。使用索引用于快速找出在某个或多个列中有一特定值的行，所有MySQL列类型都可以被索引，对相关列使用索引是提高查询操作速度的最佳途径。<br>　　MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。比如我们在查字典的时候，前面都有检索的拼音和偏旁、笔画等，然后找到对应字典页码，这样然后就打开字典的页数就可以知道我们要搜索的某一个key的全部值的信息了。<br>　　创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)，而不是在select的字段中，实际上，索引也是一张“表”，该表保存了主键与索引字段，并指向实体表的记录，虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件，建立索引会占用磁盘空间的索引文件。说白了索引就是用来提高速度的，但是就需要维护索引造成资源的浪费，所以合理的创建索引是必要的。</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitMQ介绍</title>
    <url>/2021/08/19/rabbitMQ%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>GO 99问</title>
    <url>/2021/08/19/GO%2099%E9%97%AE/</url>
    <content><![CDATA[<h4 id="T和-T的调用关系"><a href="#T和-T的调用关系" class="headerlink" title="T和*T的调用关系"></a><code>T</code>和<code>*T</code>的调用关系</h4><p>在Go语言中，为了方便，对于一个非指针和非接口定义类型<code>T</code>，</p>
<ul>
<li>一个<code>T</code>类型的值可以调用为<code>*T</code>类型声明的方法，但是仅当此<code>T</code>的值是可寻址的情况下。 编译器在调用指针属主方法前，会自动取此<code>T</code>值的地址。 因为不是任何<code>T</code>值都是可寻址的，所以并非任何<code>T</code>值都能够调用为类型<code>*T</code>声明的方法。 这种便利只是一个语法糖，而不是一种固有的规则。（常量不可寻址）</li>
<li>一个<code>*T</code>类型的值可以调用为类型<code>T</code>声明的方法。 这是因为解引用指针总是合法的。 这种便利不仅仅是一个语法糖，它也是一种固有的规则。</li>
</ul>
<p>所以很合理的， <code>*T</code>的方法集总是<code>T</code>方法集的超集，但反之不然。</p>
<p>事实上，你可以认为对于每一个为类型<code>T</code>声明的方法，编译器都会为类型<code>*T</code>自动隐式声明一个同名和同签名的方法。</p>
<span id="more"></span>

<h4 id="for和range区别"><a href="#for和range区别" class="headerlink" title="for和range区别"></a>for和range区别</h4><p>range 在迭代过程中返回的是迭代值的拷贝，如果每次迭代的元素的内存占用很低，那么 for 和 range 的性能几乎是一样。但是如果迭代的元素内存占用较高，例如一个包含很多属性的 struct 结构体，那么 for 的性能将显著地高于 range，有时候甚至会有上千倍的性能差异。对于这种场景，建议使用 for，如果使用 range，建议只迭代下标，通过下标访问迭代值，这种使用方式和 for 就没有区别了。如果想使用 range 同时迭代下标和值，则需要将切片/数组的元素改为指针，才能不影响性能。</p>
<h4 id="数组和切片区别"><a href="#数组和切片区别" class="headerlink" title="数组和切片区别"></a>数组和切片区别</h4><p>数组是不可变的数据类型，线程安全</p>
<p>切片是动态可变的数据结构，包含长度，容量以及指向数组的应用，线程不安全</p>
<h4 id="rune数据类型"><a href="#rune数据类型" class="headerlink" title="rune数据类型"></a>rune数据类型</h4><p>rune是Go语言中一种特殊的数据类型,它是int32的别名,几乎在所有方面等同于int32,用于区分字符值和整数值。</p>
<p>补充：golang中的字符有两种，uint8（byte）代表ASCII的一个字符，rune代表一个utf-8字符。</p>
<p>理解：当需要处理中文、日文或者其他复合字符时，则需要用到rune类型，rune实际是一个int32.</p>
<h4 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h4><ul>
<li>不同包的 <code>init()</code>执行顺序，按照 <code>导入包的依赖关系</code> 决定</li>
<li><code>init()</code> 不能被其他函数调用，而自动 <code>在main函数执行前</code> 被调用</li>
<li>执行顺序：import –&gt; const –&gt; var –&gt; init() –&gt; main()</li>
</ul>
<h4 id="make和new的区别"><a href="#make和new的区别" class="headerlink" title="make和new的区别"></a>make和new的区别</h4><ul>
<li>new可以初始化所有类型，为类型申请一块内存空间并返回一个指针</li>
<li>make只能用于map ，channel，slice初始化，返回的是类型引用</li>
</ul>
<h4 id="什么是协程泄露-Goroutine-Leak-？"><a href="#什么是协程泄露-Goroutine-Leak-？" class="headerlink" title="什么是协程泄露(Goroutine Leak)？"></a>什么是协程泄露(Goroutine Leak)？</h4><p>go协程正常结束后，会被gc回收，但是如果一些操作不当，就会引起协程一直处于阻塞状态或者永远运行，这种情况就是协程泄漏了，他会一直消耗资源，直到系统奔溃。泄漏的场景：</p>
<ul>
<li>Goroutine 内正在进行 channel/mutex 等读写操作，但由于逻辑问题，某些情况下会被一直阻塞。</li>
<li>Goroutine 内的业务逻辑进入死循环，资源一直无法释放。</li>
<li>Goroutine 内的业务逻辑进入长时间等待，有不断新增的 Goroutine 进入等待。</li>
</ul>
<p>检测工具：uber-go/goleak</p>
<h4 id="赋值是原子操作吗？"><a href="#赋值是原子操作吗？" class="headerlink" title="赋值是原子操作吗？"></a>赋值是原子操作吗？</h4><p>不是原子操作，会有并发安全问题。设计struct赋值的数据类型 都是并发不安全的 比如slice map等</p>
<h4 id="time-Sleep-d-和-lt-time-After-d-有何区别？"><a href="#time-Sleep-d-和-lt-time-After-d-有何区别？" class="headerlink" title="time.Sleep(d)和&lt;-time.After(d)有何区别？"></a><code>time.Sleep(d)</code>和<code>&lt;-time.After(d)</code>有何区别？</h4><p>两者都会将当前的goroutine执行暂停一段时间。 区别在于<code>time.Sleep(d)</code>函数调用将使当前的协程进入睡眠子状态，但是当前协程的<a href="https://gfw.go101.org/article/control-flows-more.html#states-of-goroutine">（主）状态</a>依然为运行状态； 而通道接收<code>&lt;-time.After(d)</code>操作将使当前协程进入阻塞状态。</p>
<h4 id="哪些类型不支持比较？"><a href="#哪些类型不支持比较？" class="headerlink" title="哪些类型不支持比较？"></a>哪些类型不支持比较？</h4><p>下列类型不支持比较：映射（map、切片、函数、包含不可比较字段的结构体类型、元素类型为不可比较类型的数组类型</p>
<p>不支持比较的类型不能用做映射类型的键值类型。请注意：</p>
<ul>
<li>尽管映射，切片和函数值不支持比较，但是它们的值可以与类型不确定的<code>nil</code>标识符比较。</li>
<li>如果两个接口值的动态类型相同且不可比较，那么在运行时<a href="https://gfw.go101.org/article/interface.html#comparison">比较这两个接口的值</a>会产生一个恐慌。</li>
</ul>
<h4 id="为什么两个nil值有时候会不相等？"><a href="#为什么两个nil值有时候会不相等？" class="headerlink" title="为什么两个nil值有时候会不相等？"></a>为什么两个<code>nil</code>值有时候会不相等？</h4><p>一个接口值可以看作是一个包裹非接口值的盒子。被包裹在一个接口值中的非接口值的类型必须实现了此接口值的类型。 在Go中，很多种类型的类型的零值都是用<code>nil</code>来表示的。 一个什么都没包裹的接口值为一个零值接口值，即nil接口值。 一个包裹着其它非接口类型的nil值的接口值并非什么都没包裹，所以它不是（或者说它不等于）一个nil接口值。</p>
<p>当对一个nil接口值和一个nil非接口值进行比较时（假设它们可以比较），此nil非接口值将先被转换为nil接口值的类型，然后再进行比较； 此转换的结果为一个包裹了此nil非接口值的一个副本的接口值，此接口值不是（或者说它不等于）一个nil接口值，所以此比较不相等。</p>
<h4 id="哪些值可以被取地址，哪些值不可以被取地址？"><a href="#哪些值可以被取地址，哪些值不可以被取地址？" class="headerlink" title="哪些值可以被取地址，哪些值不可以被取地址？"></a>哪些值可以被取地址，哪些值不可以被取地址？</h4><p>以下的值是不可以寻址的：</p>
<ul>
<li>字符串的字节元素</li>
<li>映射元素</li>
<li>接口值的动态值（类型断言的结果）</li>
<li>常量（包括有名常量和字面量）</li>
<li>声明的包级别函数</li>
<li>方法（用做函数值）</li>
<li>中间结果值<ul>
<li>函数调用</li>
<li>显式值转换</li>
<li>各种操作，不包含指针解引用（dereference）操作，但是包含：<ul>
<li>通道接收操作</li>
<li>子字符串操作</li>
<li>子切片操作</li>
<li>加法、减法、乘法、以及除法等等。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>以下的值是可寻址的，因此可以被取地址：变量</p>
<p>可寻址的结构体的字段</p>
<ul>
<li>可寻址的数组的元素</li>
<li>任意切片的元素（无论是可寻址切片或不可寻址切片）</li>
<li>指针解引用（dereference）操作</li>
</ul>
<h4 id="为什么映射元素不可被取地址？"><a href="#为什么映射元素不可被取地址？" class="headerlink" title="为什么映射元素不可被取地址？"></a>为什么映射元素不可被取地址？</h4><p>在Go中，映射的设计保证一个映射值在内存允许的情况下可以加入任意个条目。 另外为了防止一个映射中为其条目开辟的内存段支离破碎，官方标准编译器使用了哈希表来实现映射。 并且为了保证元素索引的效率，一个映射值的底层哈希表只为其中的所有条目维护一段连续的内存段。 因此，一个映射值随着其中的条目数量逐渐增加时，其维护的连续的内存段需要不断重新开辟来增容，并把原来内存段上的条目全部复制到新开辟的内存段上。 另外，即使一个映射值维护的内存段没有增容，某些哈希表实现也可能在当前内存段中移动其中的条目。 总之，映射中的元素的地址会因为各种原因而改变。 如果映射元素可以被取地址，则Go运行时（runtime）必须在元素地址改变的时候修改所有存储了元素地址的指针值。 这极大得增加了Go编译器和运行时的实现难度，并且严重影响了程序运行效率。 因此，目前，Go中禁止取映射元素的地址。</p>
<p>映射元素不可被取地址的另一个原因是表达式<code>aMap[key]</code>可能返回一个存储于<code>aMap</code>中的元素，也可能返回一个不存储于其中的元素零值。 这意味着表达式<code>aMap[key]</code>在<code>(&amp;aMap[key]).Modify()</code>调用执行之后可能仍然被估值为元素零值。 这将使很多人感到困惑，因此在Go中禁止取映射元素的地址。</p>
<h4 id="函数返回局部变量的指针是否安全？"><a href="#函数返回局部变量的指针是否安全？" class="headerlink" title="函数返回局部变量的指针是否安全？"></a>函数返回局部变量的指针是否安全？</h4><p>是的，在Go中这是绝对安全的。</p>
<p>支持栈的Go编译器将会对每个局部变量进行逃逸分析。 对于官方标准编译器来说，如果一个值可以在编译时刻被断定它在运行时刻仅会在一个协程中被使用，则此值将被开辟在（此协程的）栈上；否则此值将被开辟在堆上。</p>
]]></content>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>redis数据类型</title>
    <url>/2021/08/19/redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p>
<span id="more"></span>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/12/08/go%E5%AE%9E%E7%8E%B0keycloak%E9%80%82%E9%85%8D%E5%99%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
